#![no_std]
#![doc = include_str!("../README.md")]

extern crate alloc;
extern crate core;

pub(crate) mod define;
#[cfg(test)]
mod tests;
mod version;

use define::{PPI_RANGE, SPECIAL_RANGE, SPI_RANGE};
pub use rdif_intc::*;
pub use version::*;
pub use define::IntId;

pub enum InterruptType {
    /// Software-generated interrupt.
    ///
    /// SGIs are typically used for inter-processor communication and are
    /// generated by a write to an SGI register in the GIC.
    SGI,
    /// Private Peripheral Interrupt.
    ///
    /// Peripheral interrupts that are private to one core.
    PPI,
    /// Shared Peripheral Interrupt.
    ///
    /// Peripheral interrupts that can delivered to any connected core.
    SPI,
}

/// Translate an interrupt of a given type to a GIC INTID.
pub const fn translate_irq(id: u32, int_type: InterruptType) -> Option<u32> {
    match int_type {
        InterruptType::SGI => {
            if id < PPI_RANGE.start {
                Some(id)
            } else {
                None
            }
        }
        InterruptType::PPI => {
            if id < SPI_RANGE.start - PPI_RANGE.start {
                Some(id + PPI_RANGE.start)
            } else {
                None
            }
        }
        InterruptType::SPI => {
            if id < SPECIAL_RANGE.start {
                Some(id + SPI_RANGE.start)
            } else {
                None
            }
        }
    }
}